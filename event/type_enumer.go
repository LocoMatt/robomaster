// Code generated by "enumer -type=Type"; DO NOT EDIT.

package event

import (
	"fmt"
	"strings"
)

const (
	_TypeName_0      = "SetValueGetValueGetAvailableValuePerformActionStartListeningStopListeningActivationLocalAlbumFirmwareUpgrade"
	_TypeLowerName_0 = "setvaluegetvaluegetavailablevalueperformactionstartlisteningstoplisteningactivationlocalalbumfirmwareupgrade"
	_TypeName_1      = "ConnectionSecurity"
	_TypeLowerName_1 = "connectionsecurity"
	_TypeName_2      = "PrintLog"
	_TypeLowerName_2 = "printlog"
	_TypeName_3      = "StartVideoStopVideoRenderGetNativeTextureVideoTransferSpeedAudioDataRecvVideoDataRecv"
	_TypeLowerName_3 = "startvideostopvideorendergetnativetexturevideotransferspeedaudiodatarecvvideodatarecv"
	_TypeName_4      = "NativeFunctions"
	_TypeLowerName_4 = "nativefunctions"
)

var (
	_TypeIndex_0 = [...]uint8{0, 8, 16, 33, 46, 60, 73, 83, 93, 108}
	_TypeIndex_1 = [...]uint8{0, 10, 18}
	_TypeIndex_2 = [...]uint8{0, 8}
	_TypeIndex_3 = [...]uint8{0, 10, 19, 25, 41, 59, 72, 85}
	_TypeIndex_4 = [...]uint8{0, 15}
)

func (i Type) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _TypeName_0[_TypeIndex_0[i]:_TypeIndex_0[i+1]]
	case 100 <= i && i <= 101:
		i -= 100
		return _TypeName_1[_TypeIndex_1[i]:_TypeIndex_1[i+1]]
	case i == 200:
		return _TypeName_2
	case 300 <= i && i <= 306:
		i -= 300
		return _TypeName_3[_TypeIndex_3[i]:_TypeIndex_3[i+1]]
	case i == 500:
		return _TypeName_4
	default:
		return fmt.Sprintf("Type(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[SetValue-(0)]
	_ = x[GetValue-(1)]
	_ = x[GetAvailableValue-(2)]
	_ = x[PerformAction-(3)]
	_ = x[StartListening-(4)]
	_ = x[StopListening-(5)]
	_ = x[Activation-(6)]
	_ = x[LocalAlbum-(7)]
	_ = x[FirmwareUpgrade-(8)]
	_ = x[Connection-(100)]
	_ = x[Security-(101)]
	_ = x[PrintLog-(200)]
	_ = x[StartVideo-(300)]
	_ = x[StopVideo-(301)]
	_ = x[Render-(302)]
	_ = x[GetNativeTexture-(303)]
	_ = x[VideoTransferSpeed-(304)]
	_ = x[AudioDataRecv-(305)]
	_ = x[VideoDataRecv-(306)]
	_ = x[NativeFunctions-(500)]
}

var _TypeValues = []Type{SetValue, GetValue, GetAvailableValue, PerformAction, StartListening, StopListening, Activation, LocalAlbum, FirmwareUpgrade, Connection, Security, PrintLog, StartVideo, StopVideo, Render, GetNativeTexture, VideoTransferSpeed, AudioDataRecv, VideoDataRecv, NativeFunctions}

var _TypeNameToValueMap = map[string]Type{
	_TypeName_0[0:8]:         SetValue,
	_TypeLowerName_0[0:8]:    SetValue,
	_TypeName_0[8:16]:        GetValue,
	_TypeLowerName_0[8:16]:   GetValue,
	_TypeName_0[16:33]:       GetAvailableValue,
	_TypeLowerName_0[16:33]:  GetAvailableValue,
	_TypeName_0[33:46]:       PerformAction,
	_TypeLowerName_0[33:46]:  PerformAction,
	_TypeName_0[46:60]:       StartListening,
	_TypeLowerName_0[46:60]:  StartListening,
	_TypeName_0[60:73]:       StopListening,
	_TypeLowerName_0[60:73]:  StopListening,
	_TypeName_0[73:83]:       Activation,
	_TypeLowerName_0[73:83]:  Activation,
	_TypeName_0[83:93]:       LocalAlbum,
	_TypeLowerName_0[83:93]:  LocalAlbum,
	_TypeName_0[93:108]:      FirmwareUpgrade,
	_TypeLowerName_0[93:108]: FirmwareUpgrade,
	_TypeName_1[0:10]:        Connection,
	_TypeLowerName_1[0:10]:   Connection,
	_TypeName_1[10:18]:       Security,
	_TypeLowerName_1[10:18]:  Security,
	_TypeName_2[0:8]:         PrintLog,
	_TypeLowerName_2[0:8]:    PrintLog,
	_TypeName_3[0:10]:        StartVideo,
	_TypeLowerName_3[0:10]:   StartVideo,
	_TypeName_3[10:19]:       StopVideo,
	_TypeLowerName_3[10:19]:  StopVideo,
	_TypeName_3[19:25]:       Render,
	_TypeLowerName_3[19:25]:  Render,
	_TypeName_3[25:41]:       GetNativeTexture,
	_TypeLowerName_3[25:41]:  GetNativeTexture,
	_TypeName_3[41:59]:       VideoTransferSpeed,
	_TypeLowerName_3[41:59]:  VideoTransferSpeed,
	_TypeName_3[59:72]:       AudioDataRecv,
	_TypeLowerName_3[59:72]:  AudioDataRecv,
	_TypeName_3[72:85]:       VideoDataRecv,
	_TypeLowerName_3[72:85]:  VideoDataRecv,
	_TypeName_4[0:15]:        NativeFunctions,
	_TypeLowerName_4[0:15]:   NativeFunctions,
}

var _TypeNames = []string{
	_TypeName_0[0:8],
	_TypeName_0[8:16],
	_TypeName_0[16:33],
	_TypeName_0[33:46],
	_TypeName_0[46:60],
	_TypeName_0[60:73],
	_TypeName_0[73:83],
	_TypeName_0[83:93],
	_TypeName_0[93:108],
	_TypeName_1[0:10],
	_TypeName_1[10:18],
	_TypeName_2[0:8],
	_TypeName_3[0:10],
	_TypeName_3[10:19],
	_TypeName_3[19:25],
	_TypeName_3[25:41],
	_TypeName_3[41:59],
	_TypeName_3[59:72],
	_TypeName_3[72:85],
	_TypeName_4[0:15],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

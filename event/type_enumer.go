// Code generated by "enumer -type=Type"; DO NOT EDIT.

package event

import (
	"fmt"
	"strings"
)

const (
	_TypeName_0      = "TypeSetValueTypeGetValueTypeGetAvailableValueTypePerformActionTypeStartListeningTypeStopListeningTypeActivationTypeLocalAlbumTypeFirmwareUpgrade"
	_TypeLowerName_0 = "typesetvaluetypegetvaluetypegetavailablevaluetypeperformactiontypestartlisteningtypestoplisteningtypeactivationtypelocalalbumtypefirmwareupgrade"
	_TypeName_1      = "TypeConnectionTypeSecurity"
	_TypeLowerName_1 = "typeconnectiontypesecurity"
	_TypeName_2      = "TypePrintLog"
	_TypeLowerName_2 = "typeprintlog"
	_TypeName_3      = "TypeStartVideoTypeStopVideoTypeRenderTypeGetNativeTextureTypeVideoTransferSpeedTypeAudioDataRecvTypeVideoDataRecv"
	_TypeLowerName_3 = "typestartvideotypestopvideotyperendertypegetnativetexturetypevideotransferspeedtypeaudiodatarecvtypevideodatarecv"
	_TypeName_4      = "TypeNativeFunctions"
	_TypeLowerName_4 = "typenativefunctions"
)

var (
	_TypeIndex_0 = [...]uint8{0, 12, 24, 45, 62, 80, 97, 111, 125, 144}
	_TypeIndex_1 = [...]uint8{0, 14, 26}
	_TypeIndex_2 = [...]uint8{0, 12}
	_TypeIndex_3 = [...]uint8{0, 14, 27, 37, 57, 79, 96, 113}
	_TypeIndex_4 = [...]uint8{0, 19}
)

func (i Type) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _TypeName_0[_TypeIndex_0[i]:_TypeIndex_0[i+1]]
	case 100 <= i && i <= 101:
		i -= 100
		return _TypeName_1[_TypeIndex_1[i]:_TypeIndex_1[i+1]]
	case i == 200:
		return _TypeName_2
	case 300 <= i && i <= 306:
		i -= 300
		return _TypeName_3[_TypeIndex_3[i]:_TypeIndex_3[i+1]]
	case i == 500:
		return _TypeName_4
	default:
		return fmt.Sprintf("Type(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[TypeSetValue-(0)]
	_ = x[TypeGetValue-(1)]
	_ = x[TypeGetAvailableValue-(2)]
	_ = x[TypePerformAction-(3)]
	_ = x[TypeStartListening-(4)]
	_ = x[TypeStopListening-(5)]
	_ = x[TypeActivation-(6)]
	_ = x[TypeLocalAlbum-(7)]
	_ = x[TypeFirmwareUpgrade-(8)]
	_ = x[TypeConnection-(100)]
	_ = x[TypeSecurity-(101)]
	_ = x[TypePrintLog-(200)]
	_ = x[TypeStartVideo-(300)]
	_ = x[TypeStopVideo-(301)]
	_ = x[TypeRender-(302)]
	_ = x[TypeGetNativeTexture-(303)]
	_ = x[TypeVideoTransferSpeed-(304)]
	_ = x[TypeAudioDataRecv-(305)]
	_ = x[TypeVideoDataRecv-(306)]
	_ = x[TypeNativeFunctions-(500)]
}

var _TypeValues = []Type{TypeSetValue, TypeGetValue, TypeGetAvailableValue, TypePerformAction, TypeStartListening, TypeStopListening, TypeActivation, TypeLocalAlbum, TypeFirmwareUpgrade, TypeConnection, TypeSecurity, TypePrintLog, TypeStartVideo, TypeStopVideo, TypeRender, TypeGetNativeTexture, TypeVideoTransferSpeed, TypeAudioDataRecv, TypeVideoDataRecv, TypeNativeFunctions}

var _TypeNameToValueMap = map[string]Type{
	_TypeName_0[0:12]:         TypeSetValue,
	_TypeLowerName_0[0:12]:    TypeSetValue,
	_TypeName_0[12:24]:        TypeGetValue,
	_TypeLowerName_0[12:24]:   TypeGetValue,
	_TypeName_0[24:45]:        TypeGetAvailableValue,
	_TypeLowerName_0[24:45]:   TypeGetAvailableValue,
	_TypeName_0[45:62]:        TypePerformAction,
	_TypeLowerName_0[45:62]:   TypePerformAction,
	_TypeName_0[62:80]:        TypeStartListening,
	_TypeLowerName_0[62:80]:   TypeStartListening,
	_TypeName_0[80:97]:        TypeStopListening,
	_TypeLowerName_0[80:97]:   TypeStopListening,
	_TypeName_0[97:111]:       TypeActivation,
	_TypeLowerName_0[97:111]:  TypeActivation,
	_TypeName_0[111:125]:      TypeLocalAlbum,
	_TypeLowerName_0[111:125]: TypeLocalAlbum,
	_TypeName_0[125:144]:      TypeFirmwareUpgrade,
	_TypeLowerName_0[125:144]: TypeFirmwareUpgrade,
	_TypeName_1[0:14]:         TypeConnection,
	_TypeLowerName_1[0:14]:    TypeConnection,
	_TypeName_1[14:26]:        TypeSecurity,
	_TypeLowerName_1[14:26]:   TypeSecurity,
	_TypeName_2[0:12]:         TypePrintLog,
	_TypeLowerName_2[0:12]:    TypePrintLog,
	_TypeName_3[0:14]:         TypeStartVideo,
	_TypeLowerName_3[0:14]:    TypeStartVideo,
	_TypeName_3[14:27]:        TypeStopVideo,
	_TypeLowerName_3[14:27]:   TypeStopVideo,
	_TypeName_3[27:37]:        TypeRender,
	_TypeLowerName_3[27:37]:   TypeRender,
	_TypeName_3[37:57]:        TypeGetNativeTexture,
	_TypeLowerName_3[37:57]:   TypeGetNativeTexture,
	_TypeName_3[57:79]:        TypeVideoTransferSpeed,
	_TypeLowerName_3[57:79]:   TypeVideoTransferSpeed,
	_TypeName_3[79:96]:        TypeAudioDataRecv,
	_TypeLowerName_3[79:96]:   TypeAudioDataRecv,
	_TypeName_3[96:113]:       TypeVideoDataRecv,
	_TypeLowerName_3[96:113]:  TypeVideoDataRecv,
	_TypeName_4[0:19]:         TypeNativeFunctions,
	_TypeLowerName_4[0:19]:    TypeNativeFunctions,
}

var _TypeNames = []string{
	_TypeName_0[0:12],
	_TypeName_0[12:24],
	_TypeName_0[24:45],
	_TypeName_0[45:62],
	_TypeName_0[62:80],
	_TypeName_0[80:97],
	_TypeName_0[97:111],
	_TypeName_0[111:125],
	_TypeName_0[125:144],
	_TypeName_1[0:14],
	_TypeName_1[14:26],
	_TypeName_2[0:12],
	_TypeName_3[0:14],
	_TypeName_3[14:27],
	_TypeName_3[27:37],
	_TypeName_3[37:57],
	_TypeName_3[57:79],
	_TypeName_3[79:96],
	_TypeName_3[96:113],
	_TypeName_4[0:19],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}
